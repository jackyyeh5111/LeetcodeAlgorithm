/********************** MAX, MIN VALUE *******************************/
#include<climits>
INT_MAX = ~(1 << 31)   // for 64bit machine
INT_MIN = 1 << 31      // for 64bit machine
UINT_MAX = (uint)(~0)  // 32 bit all equal 1
LONG_MAX
LONG_MIN
ULONG_MAX

/******************** string, char, integer conversion ***************/
[int to string]         to_string(num);
[string to int]         stoi(s);            // i.e.  int val = stoi("1024");
[char to string]        string(1, ch); 
[charr array to string] string(charArr);
[islower]  'a' <= ch && ch <= 'z'

/********************** string ***************************/
In C++ string is mutable

string(char[] chArr) or string(char* chArr);  // string constructor
string(int n, char ch);                       // string constructor with n characters of ch

string str = "1234";
str[i];                                       // access i th character
str.size();  or str.length();
str.substr(start);                            // [start,  )              
str.substr(start, length);                    // [start, start + length - 1]       str doesn't change 

str.append("abc");
str.append(1, 'a');                          // append character


str.pop_back();  // "hello!" -> "hello"  Erases the last character of the string effectively.

// find matched string
size_t found = str.find("ab", start_pos);               // return pos where "ab" first occur in str.  NOTE: the return pos is size_t !!!

// find matched character
size_t found = str.find('#', start_pos);               // return pos where '# first occur in str.
if (found!=string::npos)  cout << "found";   // 

str.erase(2);                                // erase substring starting from 2.   [2, )    str changes !!!!!!!!!  str = "12"
str.erase(pos, length);                      // erase length characters starting from pos 
str.insert(2, "sz");                         // insert characters starting from pos 2.      str changes !!!!!!!!!
str.replace(pos, len, "newStr");             // replace substring starting from pos with length = len as "newStr"

str1.compare(str2);                          // 0 equal; -1 str1 comes first in lexicographic order
void reverse(str.begin(), str.end());        // reverse string.       str changes!!!!!!!!!!  no return value

#include <sstream>                        // similar to StringBuilder in Java
stringstream ss;
ss << "year" << ' ' << 2017;              // accept char, string and number(int, float, double)
ss.str();                                 // convert sstream to string

/* split */
// double while loop, not having to handle the last token
vector<string> split(const string& str, char delimiter) {
    vector<string> tokens;
    int start = 0, end = 0;
    while(end < str.size()) {
        // keep going until char euqals delimiter or encounter '\n'
        while(end < str.size() && str[end] != delimiter)
            end++;
        // ignoring continuous delimiter
        // ex: 1,,2,,,,,3 -> 1 2 3 
        if (end - start > 0)
            tokens.push_back(str.substr(start, end - start));
        end++;
        start = end;
    }

    return tokens;
}


/* split */
vector<string> split(const string &str, char delimiter) {
    vector<string> tokens;
    int end = 0;
    while(end < str.size()) {
        int start = end;
        // keep going until run into '\n' or delimiter
        while(end < str.size() && str[end] != delimiter)
            end++;

        // skip empty string
        if (start != end)
            tokens.push_back(str.substr(start, end - start));
        end++;
    }
    return tokens;
}

/* split 2 */
#include <sstream>
string input = "abc,def,ghi";             // to implement the function like split(",") in Java
stringstream ss(input);                   // equal to ss << input
string token;

while(getline(ss, token, ',')) {
    cout << token << '\n';
}

/* Building Complex Strings */
ss << "Name: " << name << ", Age: " << age;
std::string result = ss.str();

/* convert type conveniently */
std::string data = "42 3.14 Hello";
std::stringstream ss(data);

int intValue;
double doubleValue;
std::string strValue;

ss >> intValue >> doubleValue >> strValue;

std::cout << "Integer: " << intValue << std::endl;
std::cout << "Double: " << doubleValue << std::endl;
std::cout << "String: " << strValue << std::endl;

// Searches the string for the first/last character that matches "any" of the characters specified in its arguments.
// string::find_first_of, string::find_last_of
void SplitFilename (const std::string& str)
{
  std::cout << "Splitting: " << str << '\n';
  std::size_t found = str.find_last_of("/\\"); // multiple characters to match
  std::cout << " path: " << str.substr(0,found) << '\n';
  std::cout << " file: " << str.substr(found+1) << '\n';
}

int main ()
{
  std::string str1 ("/usr/bin/man");
  std::string str2 ("c:\\windows\\winhelp.exe");

  SplitFilename (str1);
  SplitFilename (str2);

  return 0;
}

/********************** array ***************************/
int nums[10] = {0};
[array to vector]  vector<int> vec(&nums[0], &nums[10]);

/********************** vector ***************************/
#include <vector>
vector<int> v;
vector<int> v(size, 0);   // create a vector with length of size and initialize all elements to 0;
vector<vector<int>> v(N, vector<int>(M, 0)); //initialize N * M 2d vector to zero

int val = v[i];           // random access
v.empty();                // return bool to indicate empty or not
v.push_back(e);           // insert element to end
v.pop_back();             // delete last element
v.clear();
v.front();                // return first element
v.erase(v.begin() + 5);   // delete 6th element;
v.insert(v.begin(), var)  // insert var in first position
v.begin();                // return iterator pointing to first element;    
v.end();                  // return iterator pointing to null behind last element;

for(vector<int>::iterator it = myvector.begin() ; it != myvector.end(); ++it)
{
    cout << *it << endl;
}

v.resize(num);                      // resize the length of vector
v.resize(num, val);                 // resize vector by using val to padding  (default is 0);
                                    // resize(num, val) can be used for constructor in class;

#include <algorithm>
sort(v.begin(), v.end());           // sort vector and from min to max by default

struct cmp{
    bool operator() (int x, int y){
        return x > y;               // descending order
    }
} cmpObj;
sort(v.begin(), v.end(), cmpObj);   // sort with self-defined comparator

std::cout << "The smallest element is " << *std::min_element(myints,myints+7) << '\n';
std::cout << "The largest element is "  << *std::max_element(myints,myints+7) << '\n';

// assign
vector<int> first{1, 2, 3, 4}
vector<int> second;
second.assign(first.begin() + 1, first.end() - 1); // second = {2, 3}

// remove duplicate in banned vector
set<int> tmp(banned.begin(), banned.end());
banned.assign(tmp.begin(), tmp.end());

// argmax, argmin
int argmax = std::distance(myint.begin(), std::max_element(myint.begin(), myint.end()));
int argmin = std::distance(myint.begin(), std::min_element(myint.begin(), myint.end()));

/********************** unordered_map, map, unordered_set, set ***************************/
#include<unordered_map>
unordered_map<int, string> Map;                         // O(1) or constant time complexity
#include<map>
map<int, string> treeMap;                               // O(logN) time complexity

Map[1] = "one";                                         // insert     equivalent to map.put(key, val)
string str = Map[1];                                    // get        equivalent to map.get(key)
if(Map.find(1) != Map.end()) cout << Map[1] << endl;    // search key equivalent to map.containsKey(key)
Map.erase(1);                                           // delete     equivalent to map.remove(key)

unordered_map<int, string>::iterator it = Map.find(1);  // find by key
if(iter != Map.end()) cout << iter->second; 
else cout << "not found"; 

for(iter = Map.begin(); iter != Map.end(); ++iter)
    cout << iter->first << iter->second <<end;          // traverse

Map.erase("one");                                       // delete
Map.empty();
Map.size();

unordered_set<int> Set; 
Set.insert(val);
Set.erase(val);
Set.erase(iterator);
Set.size();
Set.empty();
if(Set.find(1) != Set.end()) cout << "found" << endl;   // find val  equivalent to set.contains(val)
for(iter = Set.begin(); iter != Set.end(); ++iter)      // traverse
    cout << *iter <<endl;

set<int>::iterator it = Set.upper_bound(val);           //Return iterator pointing to first element after val             > val
set<int>::iterator it = Set.lower_bound(val);           //Return iterator pointing to first element not goes before val   >= val

struct cmp{
    bool operator()(Node* a, Node* b){
        return (a->val) < (b->val);
    }
};
set<Node*, cmp> s;                                      //intialize ordered set with comparator

/********************** stack, queue, heap, deque ***************************/
#include <stack>
#include <queue>
#include <priority_queue>
stack<int> s;
queue<int> q;
s.top();                                       // access the top element
s.push();
s.pop();
q.front();                                     // access the first element in queue
q.pop();                                       // does not return element !!!!!
q.empty();

priority_queue<int> pq;                        // max heap by default
pq.push(val);
pq.top();                                      // access first element
pq.pop();                                      // pop out first value, does not return element !!!!!

priority_queue<int> max_heap; // max heap
priority_queue<int, vector<int>, std::greater<int>> min_heap; // min heap
    

/* build min heap!!! */
struct cmp{
  bool operator()(Node* a, Node* b){
    return a -> x > b -> x;                    // build min heap               
  }
};

priority_queue<Node*, vector<Node*>, cmp> pq;  // NOTE:  the format is different for sort function!!!
pq.push(new Node(1, 2));

#include<deque>
deque<int> dq (2,0);
dq.push_back(1);
dq.push_front(-1);
cout << dq[0] << endl;

/************************* pair / make_pair *******************************/
#include <utility>
pair<int, int> pr;
pr = make_pair(2, 3);             // generate pair
cout << pr.first << endl;         // access first value
cout << pr.second << endl;        // access second value

/************************* rand / srand ***********************************/
#include<stdlib.h>
#include<time.h>
srand((unsigned)time(0));  // initialize rand seed
(rand()%(b-a))+ a;         // random number from [a, b) -> open loop
(rand()%(b-a+1))+ a;       // random number from [a, b]
(rand()%(b+a)) - a;         // random number from [-a, b)
rand() % len + a;          // [a, len + a)
rand()/double(RAND_MAX);   // random floating number from [0.0, 1.0] -> closed loop
rand()/double(RAND_MAX) * (2 * a) - a;   // random floating number from [-a, a]

// c++ 11 supports default_random_engine
default_random_engine eng;
eng() % len;               // [0, len)

/************************* math ***********************************/
#include <math.h>
M_PI                       // pi in math
cos(theta * M_PI / 180.0)  // cos takes angle in rad as input
acos(-1) = M_PI;           // acos output is angle in rad
sqrt()                     // compute square root
round()                    // round floating value to closest integer
pow(n, k);                 // compute n^k

/************************* Format Output ***********************************/
#include <iomanip>
const double value = 12.3456789;
cout << setprecision(4) << value << endl;   // 改成4精度，所以输出为12.35
cout << fixed << setprecision(4) << value << endl; // 加了fixed意味着是固定点方式显示，所以这里的精度指的是小数位，输出为12.3457

/************************* swap reference / pointer ***********************/
In bfs, we use two queues in Java. Similarly, we can swap two containers in C++
cur.swap(next);     // swap cur and next reference;  两个容器的交换，可以用于map, set, queue, vector等

In cpp, the operator precedence is:  () > []  > *  >  >>  > &
        that is: Function call > Array subscripting > Dereference > Bitwise shift > Bitwise AND

/************************ rotate ***************************/
rotate (Iterator first, Iterator middle, Iterator last);
// Rotates elements in the range [first,last), the element pointed by middle becomes the new first element.

Example:
for (int i=1; i<10; ++i) vec.push_back(i);  // 1 2 3 4 5 6 7 8 9
rotate(vec.begin(),vec.begin()+3,vec.end());// 4 5 6 7 8 9 1 2 3

/************************ Node ***************************/

// this-> is important!!! Do not skip. Do not know why.
struct Node {
    int key;
    int value;
    Node *next;
    Node(int key=-1, int value=-1) {
        this->key = key;
        this->value = value;
        this->next = nullptr;
    }
};

// this-> is important!!! Do not skip. Do not know why.
class ListNode{
public:
    int val;
    ListNode* next;
    ListNode(int val){
        this->val = val;
        this->next = NULL;
    }
};

class TreeNode{
public:
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int val){
        this->val = val;
        this->left = NULL;
        this->right = NULL;
    }
};

class TrieNode {
public: 
    int num_branch = 26;
    vector<TrieNode*> next;
    bool is_end = false;
    TrieNode() {
        next.resize(num_branch, nullptr);
    }
};

class Node{
public:
    int x;
    int y;
    Node(int x, int y){
        this->x;
        this->y;
    }
    friend operator < (Node& a, Node& b){
        return this.x - that.x;
    }
    void print(){
        cout<< this->x << this->y <<endl;
    }
};
/*********************** pointer **********************/

Node* p = new Node(x, y);
p -> x;                   // access class members;
p -> print();             // access class member function;

/* std algorithm */

// count_if
auto isMaxFreq = [max_freq](const auto &pair){return pair.second == max_freq;};
int num_char_max_freq = count_if(char_freq.begin(), char_freq.end(), isMaxFreq);

// any_of
if ( std::any_of(foo.begin(), foo.end(), [](int i){return i<0;}) )
    std::cout << "There are negative elements in the range.\n";


// tree structure
Think about empty tree, leaf node, skewed tree, bst or not, self-cycle or not

- bst

                       [6]  
                /              \
             [2]                 [8]   
           /     \             /     \
        [0]       [4]       [7]       [9]    

- n-ary tree

                 [           ]
             /         |         \
           [1]        [2]        [3]             
         /     \
      [4]      [5]
- skew tree

                 [3]  
                / 
             [2] 
            /
         [1]
- trie

class TrieNode {
public: 
    int num_branch = 26;
    vector<TrieNode*> next;
    bool is_end = false;
    TrieNode() {
        next.resize(num_branch, nullptr);
    }
};

["cat", "dig", "dog", "dogs"]
Each node represents a character or a part of a string. The root node represents starting point of prefix tree, represneting an empty string
For each end of a string, we can add a flag "end" to the node.

                    [ root ]
                   /         \
               [d]            [c]
             /      \           \   
          [o]       [i]          [a]       
            \          \            \   
     end -> [g]        [g] <- end    [t]  <- end 
              \
       end -> [s]
- topological sort

    0 -> 1 -> 2 -> 3
              ˅    ^ 
              4 -> 5

- disjoint set (union find)
The Union-Find algorithm, also known as Disjoint Set Union (DSU), is a data structure that efficiently handles dynamic connectivity problems by managing a collection of disjoint sets. It supports two primary operations: Find and Union. 
1. The Find operation determines the representative or root of the set containing a particular element, allowing us to check if two elements are in the same set. 
2. The Union operation merges two sets by linking their roots, effectively combining them into one.

## init ##
  nodes: 1 2 3 4 5 6
parents: 1 2 3 4 5 6

## connected components ##
  nodes: 1 2 3 4 5 6
parents: 1 1 1 2 5 5

                 [1]
               /     \
            [2]      [3]
            /
          [4]

                 [5]
                  |     
                 [6]   

## Tricks ##
trick 1: union by rank

Initially, all elements are single element subsets.
0 1 2 

Do Union(0, 1)  
   1       2  
  /
 0 
Do Union(1, 2)
         2  
        /
      1           
    /
  0
    ==>
      1   
    /  \
   0    2
trick 2: path compression
Do Find(0)
         2              2
        /             /   \
      1         =>  1      0   
    /
  0
    
- graph
    X X X X X 
    X O O X X
    X X O X X
    X X O X X
    X X X O X

- backtrack with dfs

nums: [1, 2]
                       []  
                /              \
             [1] (pick 1)        []  (not pick 1)
           /     \             /     \
        [1,2]       [1]       [2]       []    
- min_heap

          1  
        /   \
      2      3     
    /   \
  4      5
  